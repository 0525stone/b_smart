//#include "opencv_all.hpp"
#include <iostream>  
#include "opencv2/opencv.hpp"  

int main(void)
{
	double camera_focal = 1000;
	cv::Point2d camera_center(320, 240);

	// Load two views of 'box.xyz'
	// c.f. You need to run 'image_formation.cpp' to generate point observation.
	//      You can apply Gaussian noise by change value of 'camera_noise' if necessary.
	std::vector<cv::Point2d> points0, points1;
	FILE* fin0 = fopen("image_formation0.xyz", "rt");
	FILE* fin1 = fopen("image_formation1.xyz", "rt");
	if (fin0 == NULL || fin1 == NULL) return -1;
	while (!feof(fin0) || !feof(fin1))
	{
		double x, y, w;
		if (!feof(fin0) && fscanf(fin0, "%lf %lf %lf", &x, &y, &w) == 3)
			points0.push_back(cv::Point2d(x, y));
		if (!feof(fin1) && fscanf(fin1, "%lf %lf %lf", &x, &y, &w) == 3)
			points1.push_back(cv::Point2d(x, y));
	}
	fclose(fin0);
	fclose(fin1);
	if (points0.size() != points1.size()) return -1;

	// Esitmate relative pose of two views
	cv::Mat F = cv::findFundamentalMat(points0, points1, cv::FM_8POINT);	// homogeneous를 가정하고 푸는 건데?
	cv::Mat K = (cv::Mat_<double>(3, 3) << camera_focal, 0, camera_center.x, 0, camera_focal, camera_center.y, 0, 0, 1);
	cv::Mat E = K.t() * F * K;
	cv::Mat R, t;
	cv::recoverPose(E, points0, points1, K, R, t);
	//	cv::Mat check0 = cv::Mat::eye(3, 4, CV_64F);	// eye는 3*3 단위행렬에 0,0,0 열추가
	// Reconstruct 3D points of 'box.xyz' (triangulation)
	cv::Mat P0 = K * cv::Mat::eye(3, 4, CV_64F);	// Mat 클래스 출력은 어케하나...
	cv::Mat Rt, X;
	//	cout << P0.at<double >(0, 0) << endl;			// 출력 안됨... 디버깅으로 확인함
	cv::hconcat(R, t, Rt);
	cv::Mat P1 = K * Rt;

	// 여기부터 내가 한 번 직접 해보기
	cv::Mat P0_1T = P0.row(0);
	cv::Mat P0_2T = P0.row(1);
	cv::Mat P0_3T = P0.row(2);
	cv::Mat P1_1T = P1.row(0);
	cv::Mat P1_2T = P1.row(1);
	cv::Mat P1_3T = P1.row(2);
	//cv::Mat A(4,4,CV_64F);

	std::vector<cv::Point3d> X_real;
	for (int i = 0; i <points0.size(); i++)
		//	for (int i = 0; i <1; i++)

	{
		cv::Mat A;
		int x0 = points0[i].x;
		int x1 = points1[i].x;
		int y0 = points0[i].y;
		int y1 = points1[i].y;
		cv::Mat A0 = x0*P0_3T - P0_1T;
		cv::Mat A1 = y0*P0_3T - P0_2T;
		cv::Mat A2 = x1*P0_3T - P1_1T;
		cv::Mat A3 = y1*P0_3T - P1_2T;
		std::vector<cv::Point3f> X_temp;
		A.push_back(A0);
		A.push_back(A1);
		A.push_back(A2);
		A.push_back(A3);		// 디버깅으로 확인하는데, A는 왜 사라지는거지...
		// A의 singular value 구하는거 필요.
		cv::Mat matrW(4, 1, CV_64F);
		cv::Mat matrU(4, 4, CV_64F);
		cv::Mat matrV(4, 4, CV_64F);	// matrV에 맞는 값이 나오는건 확인됨
		cv::SVD::compute(A, matrW, matrU, matrV);
		// singular value를 저장할 X_ 도 필요
		// 예제 : cvmSet(mat1, 0, 0, 2.0f); // mat1 매트릭스의 (0, 0) 항에 2.0f 값을 집어넣는다
		printf("once\n");
		// Mat의 요소 접근이 잘못된듯...

		printf("%f\n", matrV.at<double>(0, 0));
		// vector에다가 하나의 벡터 추가를 어케하냐고....
		X_real.push_back(cv::Point3d(matrV.at<double>(3, 0) / matrV.at<double>(3, 3), matrV.at<double>(3, 1) / matrV.at<double>(3, 3), matrV.at<double>(3, 2) / matrV.at<double>(3, 3)));
		//	X_real[i].x = 3.0;
		//	X_real[i].y = matrV.at<float>(3, 1) / matrV.at<float>(3, 3);
		//	X_real[i].z = matrV.at<float>(3, 2) / matrV.at<float>(3, 3);

	}

	cv::triangulatePoints(P0, P1, points0, points1, X);
	X.row(0) = X.row(0) / X.row(3);
	X.row(1) = X.row(1) / X.row(3);
	X.row(2) = X.row(2) / X.row(3);
	X.row(3) = 1;
	printf("on the process\n");
	// Store the 3D points
	FILE* fout = fopen("triangulation.xyz", "wt");
	if (fout == NULL) return -1;
	printf("on the process\n");
	for (int c = 0; c < X.cols; c++)
		//printf("working");
		fprintf(fout, "%f %f %f\n", X.at<double>(0, c), X.at<double>(1, c), X.at<double>(2, c));
	fclose(fout);		// 창으로 출력하는게 아니라 파일로 저장되어있음(box의 점들의 실제 위치)



	FILE* fout1 = fopen("triangulation__.xyz", "wt");
	if (fout1 == NULL) return -1;
	for (int c = 0; c < points0.size(); c++)
		//printf("working");
		fprintf(fout1, "%f %f %f\n", X_real[c].x, X_real[c].y, X_real[c].z);
	fclose(fout1);		// 창으로 출력하는게 아니라 파일로 저장되어있음(box의 점들의 실제 위치)

	return 0;
}
